<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Blip.HttpClient</name>
    </assembly>
    <members>
        <member name="T:Blip.HttpClient.Exceptions.BlipHttpClientException">
            <summary>
            Exception thrown when the response status from BLiP is not Success
            </summary>
        </member>
        <member name="P:Blip.HttpClient.Exceptions.BlipHttpClientException._message">
            <summary>
            Exception message
            </summary>
        </member>
        <member name="P:Blip.HttpClient.Exceptions.BlipHttpClientException.ResponseStatus">
            <summary>
            Response status returned by the BLiP API
            </summary>
        </member>
        <member name="P:Blip.HttpClient.Exceptions.BlipHttpClientException.Reason">
            <summary>
            Reason for failure returned by the BLiP API
            </summary>
        </member>
        <member name="P:Blip.HttpClient.Exceptions.BlipHttpClientException.Id">
            <summary>
            Error ID returned by the BLiP API
            </summary>
        </member>
        <member name="P:Blip.HttpClient.Exceptions.BlipHttpClientException.Resource">
            <summary>
            Any extra resources returned by the BLiP API
            </summary>
        </member>
        <member name="M:Blip.HttpClient.Exceptions.BlipHttpClientException.#ctor(System.String)">
            <summary>
            Constructor to propagate a given <paramref name="message"/> in the exception
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Blip.HttpClient.Exceptions.BlipHttpClientException.#ctor(System.String,Lime.Protocol.Command)">
            <summary>
            Constructor to propagate a <paramref name="message"/> and a <paramref name="command"/>
            </summary>
            <param name="message"></param>
            <param name="command"></param>
        </member>
        <member name="M:Blip.HttpClient.Exceptions.BlipHttpClientException.#ctor">
            <summary>
            Base default ctor
            </summary>
        </member>
        <member name="M:Blip.HttpClient.Exceptions.BlipHttpClientException.#ctor(System.String,System.Exception)">
            <summary>
            Base ctor propagating a given <paramref name="message"/> and a possible <paramref name="innerException"/>
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="P:Blip.HttpClient.Exceptions.BlipHttpClientException.Message">
            <summary>
            Exception message
            </summary>
        </member>
        <member name="M:Blip.HttpClient.Extensions.BlipClientBuilderExtensions.UsingAuthorizationKey(Take.Blip.Client.BlipClientBuilder,System.String)">
            <summary>
            Configures the authorization key inside the builder
            </summary>
            <param name="builder"></param>
            <param name="authorizationKey"></param>
        </member>
        <member name="T:Blip.HttpClient.Extensions.ServiceCollectionExtensions">
            <summary>
            Extensions for the IServiceCollection dependency injection interface
            </summary>
        </member>
        <member name="M:Blip.HttpClient.Extensions.ServiceCollectionExtensions.RegisterBlipExtensions(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers BLiP's extensions on the services collection
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Blip.HttpClient.Extensions.ServiceCollectionExtensions.DefaultRegister(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Collections.Generic.List{Lime.Protocol.Document},Blip.HttpClient.Models.BlipProtocol)">
            <summary>
            Updates the ServiceCollection with any custom documents and BLiP's extensions
            </summary>
            <param name="services"></param>
            <param name="authKey"></param>
            <param name="documentList"></param>
            <param name="protocol">Defaults to Http to avoid breaking changes</param>
        </member>
        <member name="T:Blip.HttpClient.Factories.BlipClientFactory">
            <summary>
            Factory that allows the creation of a BlipClient that uses Http or Tcp
            </summary>
        </member>
        <member name="M:Blip.HttpClient.Factories.BlipClientFactory.BuildServiceCollection(System.String,Blip.HttpClient.Models.BlipProtocol,System.Collections.Generic.List{Lime.Protocol.Document},Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Creates or updates a Service Collection to include BLiP's extensions and any custom Documents, including an <c>ISender</c>
            </summary>
            <param name="authKey"></param>
            <param name="protocol"></param>
            <param name="documents"></param>
            <param name="serviceCollection"></param>
        </member>
        <member name="M:Blip.HttpClient.Factories.BlipClientFactory.BuildBlipClient(System.String,Blip.HttpClient.Models.BlipProtocol,System.Collections.Generic.List{Lime.Protocol.Document})">
            <summary>
            Builds an ISender using the given auth key for the given protocol
            </summary>
            <param name="authKey"></param>
            <param name="protocol"></param>
            <param name="documents"></param>
        </member>
        <member name="T:Blip.HttpClient.Factories.BlipHttpClientFactory">
            <summary>
            Factory that allows the creation of a BlipClient that uses Http
            </summary>
        </member>
        <member name="M:Blip.HttpClient.Factories.BlipHttpClientFactory.BuildServiceCollection(System.String,System.Collections.Generic.List{Lime.Protocol.Document},Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Creates or updates a Service Collection to include BLiP's extensions and any custom Documents
            </summary>
            <param name="authKey"></param>
            <param name="documents"></param>
            <param name="serviceCollection"></param>
            <returns></returns>
        </member>
        <member name="M:Blip.HttpClient.Factories.BlipHttpClientFactory.BuildBlipHttpClient(System.String,Lime.Protocol.Serialization.IDocumentTypeResolver)">
            <summary>
            Builds an ISender using the given auth key and custom documents previously set
            </summary>
            <param name="authKey"></param>
            <param name="documentTypeResolver"></param>
            <returns></returns>
        </member>
        <member name="M:Blip.HttpClient.Factories.BlipHttpClientFactory.BuildBlipHttpClient(System.String)">
            <summary>
            Builds an ISender using the given auth key
            </summary>
            <param name="authKey"></param>
            <returns></returns>
        </member>
        <member name="T:Blip.HttpClient.Models.BlipProtocol">
            <summary>
            Supported protocols for BLiP's <c>ISender</c>
            </summary>
        </member>
        <member name="F:Blip.HttpClient.Models.BlipProtocol.Http">
            <summary>
            More unstable, cheaper to open and close
            </summary>
        </member>
        <member name="F:Blip.HttpClient.Models.BlipProtocol.Tcp">
            <summary>
            Highly stable, faster, more expensive to open and close
            </summary>
        </member>
        <member name="T:Blip.HttpClient.Models.BroadcastListResource">
            <summary>
            Resource to be sent along with broadcast list creation 
            </summary>
        </member>
        <member name="F:Blip.HttpClient.Models.BroadcastListResource.MEDIA_TYPE">
            <summary>
            Mime Media type
            </summary>
        </member>
        <member name="M:Blip.HttpClient.Models.BroadcastListResource.#ctor(System.String)">
            <summary>
            Creates the resource using a given identity string
            </summary>
            <param name="identity"></param>
        </member>
        <member name="P:Blip.HttpClient.Models.BroadcastListResource.Identity">
            <summary>
            Identity.ToString() of the list to be created
            </summary>
        </member>
        <member name="T:Blip.HttpClient.Services.BlipHttpClient">
            <summary>
            BLiP ISender implementation that uses Http calls instead of Tcp
            </summary>
        </member>
        <member name="M:Blip.HttpClient.Services.BlipHttpClient.#ctor(Blip.HttpClient.Services.IBlipHttpClient)">
            <summary>
            Base ctor using a given http client
            </summary>
            <param name="blipHttpClient"></param>
        </member>
        <member name="M:Blip.HttpClient.Services.BlipHttpClient.ProcessCommandAsync(Lime.Protocol.Command,System.Threading.CancellationToken)">
            <summary>
            Sends a command to BLiP and returns its response.
            </summary>
            <param name="requestCommand"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Blip.HttpClient.Services.BlipHttpClient.SendCommandAsync(Lime.Protocol.Command,System.Threading.CancellationToken)">
            <summary>
            Sends a command to BLiP
            </summary>
            <param name="command"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Blip.HttpClient.Services.BlipHttpClient.SendMessageAsync(Lime.Protocol.Message,System.Threading.CancellationToken)">
            <summary>
            Sends a message through BLiP to the set recipient. Message's content is a LIME Document Type.
            </summary>
            <param name="message"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Blip.HttpClient.Services.BlipHttpClient.SendNotificationAsync(Lime.Protocol.Notification,System.Threading.CancellationToken)">
            <summary>
            Sends a notification to BLiP
            </summary>
            <param name="notification"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Blip.HttpClient.Services.Broadcast.BroadcastService">
            <summary>
            Service responsible for managing broadcast lists and sending messages to them
            </summary>
        </member>
        <member name="M:Blip.HttpClient.Services.Broadcast.BroadcastService.#ctor(Take.Blip.Client.ISender)">
            <summary>
            Creates an instance of the BroadcastService using a BLiP Client
            </summary>
            <param name="sender">ISender instance, from BlipHttpClientFactory</param>
        </member>
        <member name="M:Blip.HttpClient.Services.Broadcast.BroadcastService.#ctor(System.String)">
            <summary>
            Creates a BroadcastService instance using a given authKey.
            </summary>
            <param name="authKey">Bot authorization key</param>
        </member>
        <member name="M:Blip.HttpClient.Services.Broadcast.BroadcastService.AddRecipientAsync(System.String,Lime.Protocol.Identity,System.Threading.CancellationToken)">
            <summary>
            Adds a recipient to a broadcast list based on the recipient's identity and the list's name
            </summary>
            <param name="listName"></param>
            <param name="recipientIdentity"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Blip.HttpClient.Services.Broadcast.BroadcastService.AddRecipientAsync(System.String,Lime.Protocol.Identity,System.Threading.CancellationToken,Serilog.ILogger)">
            <summary>
            Adds a recipient to a broadcast list based on the recipient's identity and the list's name
            </summary>
            <param name="listName"></param>
            <param name="recipientIdentity"></param>
            <param name="cancellationToken"></param>
            <param name="logger"></param>
            <returns>Lime <c>Command</c> response object</returns>
            <exception cref="T:Blip.HttpClient.Exceptions.BlipHttpClientException">Failure Adding identity to the broadcast list</exception>
            <exception cref="T:System.Exception">Unknown error</exception>
        </member>
        <member name="M:Blip.HttpClient.Services.Broadcast.BroadcastService.CreateDistributionListAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a distribution list using the given name. The <param nameref="listName"/> should ideally have the bot's <c>Identifier</c> as a prefix
            </summary>
            <param name="listName"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Blip.HttpClient.Services.Broadcast.BroadcastService.CreateDistributionListAsync(System.String,System.Threading.CancellationToken,Serilog.ILogger)">
            <summary>
            Creates a distribution list using the given name. The <param nameref="listName"/> should ideally have the bot's <c>Identifier</c> as a prefix
            </summary>
            <param name="listName"></param>
            <param name="cancellationToken"></param>
            <param name="logger"></param>
            <returns>Lime <c>Command</c> response object</returns>
            <exception cref="T:Blip.HttpClient.Exceptions.BlipHttpClientException">Failure creating broadcast list</exception>
            <exception cref="T:System.Exception">Unknown error</exception>
        </member>
        <member name="M:Blip.HttpClient.Services.Broadcast.BroadcastService.DeleteDistributionListAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes a given distribution list
            </summary>
            <param name="listName"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Blip.HttpClient.Services.Broadcast.BroadcastService.DeleteDistributionListAsync(System.String,System.Threading.CancellationToken,Serilog.ILogger)">
            <summary>
            Delete a distribution list using the given <paramref name="listName"/>.
            </summary>
            <param name="listName"></param>
            <param name="cancellationToken"></param>
            <param name="logger"></param>
            <returns>Lime <c>Command</c> response object</returns>
            <exception cref="T:Blip.HttpClient.Exceptions.BlipHttpClientException">Failure deleting broadcast list</exception>
            <exception cref="T:System.Exception">Unknown error</exception>
        </member>
        <member name="M:Blip.HttpClient.Services.Broadcast.BroadcastService.DeleteRecipientAsync(System.String,Lime.Protocol.Identity,System.Threading.CancellationToken)">
            <summary>
            Removes given <paramref name="recipientIdentity"/> from the broadcast list with the name <paramref name="listName"/>
            </summary>
            <param name="listName"></param>
            <param name="recipientIdentity"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Blip.HttpClient.Services.Broadcast.BroadcastService.DeleteRecipientAsync(System.String,Lime.Protocol.Identity,System.Threading.CancellationToken,Serilog.ILogger)">
            <summary>
            Removes given <paramref name="recipientIdentity"/> from the broadcast list with the name <paramref name="listName"/>
            </summary>
            <param name="listName"></param>
            <param name="recipientIdentity"></param>
            <param name="cancellationToken"></param>
            <param name="logger"></param>
            <returns>Lime <c>Command</c> response object</returns>
            <exception cref="T:Blip.HttpClient.Exceptions.BlipHttpClientException">Failure removing user from distribution list</exception>
            <exception cref="T:System.Exception">Unknown error</exception>
        </member>
        <member name="M:Blip.HttpClient.Services.Broadcast.BroadcastService.GetListIdentity(System.String)">
            <summary>
            Gets the list's identity based on the <paramref name="listName"/>
            </summary>
            <param name="listName"></param>
            <returns></returns>
        </member>
        <member name="M:Blip.HttpClient.Services.Broadcast.BroadcastService.GetRecipientsAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Returns a list of recipients for the list with the name <paramref name="listName"/>
            </summary>
            <param name="listName"></param>
            <param name="skip">Recipients to skip from the start</param>
            <param name="take">Amount of recipients to get</param>
            <param name="cancellationToken"></param>
            <returns>DocumentCollection with the items being the recovered recipients</returns>
        </member>
        <member name="M:Blip.HttpClient.Services.Broadcast.BroadcastService.GetRecipientsAsync(Serilog.ILogger,System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Returns a list of recipients for the list with the name <paramref name="listName"/>
            </summary>
            <param name="listName"></param>
            <param name="skip">Recipients to skip from the start</param>
            <param name="take">Amount of recipients to get</param>
            <param name="logger"></param>
            <param name="cancellationToken"></param>
            <returns>DocumentCollection with the items being the recovered recipients</returns>
            <exception cref="T:Blip.HttpClient.Exceptions.BlipHttpClientException">Failure getting recipients for the given distribution list</exception>
            <exception cref="T:System.Exception">Unknown error</exception>
        </member>
        <member name="M:Blip.HttpClient.Services.Broadcast.BroadcastService.GetRecipientsAsynGetAllDistributionListsAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Returns a given number <paramref name="take"/> (with a <paramref name="skip"/> offset) of recipients
            </summary>
            <param name="skip"></param>
            <param name="take"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Blip.HttpClient.Services.Broadcast.BroadcastService.HasRecipientAsync(System.String,Lime.Protocol.Identity,System.Threading.CancellationToken)">
            <summary>
            Checks if the given <paramref name="listName"/> has the recipient <paramref name="recipientIdentity"/>
            </summary>
            <param name="listName"></param>
            <param name="recipientIdentity"></param>
            <param name="cancellationToken"></param>
            <returns>Boolean indicating if the recipient is or not on the list</returns>
        </member>
        <member name="M:Blip.HttpClient.Services.Broadcast.BroadcastService.SendMessageAsync(System.String,Lime.Protocol.Document,System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a message to the given broadcast list
            </summary>
            <param name="listName"></param>
            <param name="content">Message to be sent</param>
            <param name="id"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Blip.HttpClient.Services.Broadcast.BroadcastService.SendMessageAsync(System.String,Lime.Protocol.Document,Serilog.ILogger,System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a message to the given broadcast list
            </summary>
            <param name="logger"></param>
            <param name="cancellationToken"></param>
            <param name="listName"></param>
            <param name="content">Message to be sent</param>
            <param name="id"></param>
            <returns>Lime <c>Command</c> response object</returns>
            <exception cref="T:Blip.HttpClient.Exceptions.BlipHttpClientException">Failure sending message to distribution list</exception>
            <exception cref="T:System.Exception">Unknown error</exception>
        </member>
        <member name="T:Blip.HttpClient.Services.Broadcast.IBroadcastService">
            <summary>
            Service responsible for managing broadcast lists and sending messages to them
            </summary>
        </member>
        <member name="M:Blip.HttpClient.Services.Broadcast.IBroadcastService.AddRecipientAsync(System.String,Lime.Protocol.Identity,System.Threading.CancellationToken,Serilog.ILogger)">
            <summary>
            Adds a recipient to a broadcast list based on the recipient's identity and the list's name
            </summary>
            <param name="listName"></param>
            <param name="recipientIdentity"></param>
            <param name="cancellationToken"></param>
            <param name="logger"></param>
            <returns>Lime <c>Command</c> response object</returns>
            <exception cref="T:Blip.HttpClient.Exceptions.BlipHttpClientException">Failure Adding identity to the broadcast list</exception>
            <exception cref="T:System.Exception">Unknown error</exception>
        </member>
        <member name="M:Blip.HttpClient.Services.Broadcast.IBroadcastService.CreateDistributionListAsync(System.String,System.Threading.CancellationToken,Serilog.ILogger)">
            <summary>
            Creates a distribution list using the given name. The <param nameref="listName"/> should ideally have the bot's <c>Identifier</c> as a prefix
            </summary>
            <param name="listName"></param>
            <param name="cancellationToken"></param>
            <param name="logger"></param>
            <returns>Lime <c>Command</c> response object</returns>
            <exception cref="T:Blip.HttpClient.Exceptions.BlipHttpClientException">Failure creating broadcast list</exception>
            <exception cref="T:System.Exception">Unknown error</exception>
        </member>
        <member name="M:Blip.HttpClient.Services.Broadcast.IBroadcastService.DeleteDistributionListAsync(System.String,System.Threading.CancellationToken,Serilog.ILogger)">
            <summary>
            Delete a distribution list using the given <paramref name="listName"/>.
            </summary>
            <param name="listName"></param>
            <param name="cancellationToken"></param>
            <param name="logger"></param>
            <returns>Lime <c>Command</c> response object</returns>
            <exception cref="T:Blip.HttpClient.Exceptions.BlipHttpClientException">Failure deleting broadcast list</exception>
            <exception cref="T:System.Exception">Unknown error</exception>
        </member>
        <member name="M:Blip.HttpClient.Services.Broadcast.IBroadcastService.DeleteRecipientAsync(System.String,Lime.Protocol.Identity,System.Threading.CancellationToken,Serilog.ILogger)">
            <summary>
            Removes given <paramref name="recipientIdentity"/> from the broadcast list with the name <paramref name="listName"/>
            </summary>
            <param name="listName"></param>
            <param name="recipientIdentity"></param>
            <param name="cancellationToken"></param>
            <param name="logger"></param>
            <returns>Lime <c>Command</c> response object</returns>
            <exception cref="T:Blip.HttpClient.Exceptions.BlipHttpClientException">Failure removing user from distribution list</exception>
            <exception cref="T:System.Exception">Unknown error</exception>
        </member>
        <member name="M:Blip.HttpClient.Services.Broadcast.IBroadcastService.GetRecipientsAsync(Serilog.ILogger,System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Returns a list of recipients for the list with the name <paramref name="listName"/>
            </summary>
            <param name="listName"></param>
            <param name="skip">Recipients to skip from the start</param>
            <param name="take">Amount of recipients to get</param>
            <param name="logger"></param>
            <param name="cancellationToken"></param>
            <returns>DocumentCollection with the items being the recovered recipients</returns>
            <exception cref="T:Blip.HttpClient.Exceptions.BlipHttpClientException">Failure getting recipients for the given distribution list</exception>
            <exception cref="T:System.Exception">Unknown error</exception>
        </member>
        <member name="M:Blip.HttpClient.Services.Broadcast.IBroadcastService.SendMessageAsync(System.String,Lime.Protocol.Document,Serilog.ILogger,System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a message to the given broadcast list
            </summary>
            <param name="logger"></param>
            <param name="cancellationToken"></param>
            <param name="listName"></param>
            <param name="content">Message to be sent</param>
            <param name="id"></param>
            <returns>Lime <c>Command</c> response object</returns>
            <exception cref="T:Blip.HttpClient.Exceptions.BlipHttpClientException">Failure sending message to distribution list</exception>
            <exception cref="T:System.Exception">Unknown error</exception>
        </member>
        <member name="T:Blip.HttpClient.Services.Bucket.BucketService">
            <summary>
            Allows the storage of documents in the server on an isolated chatbot's container
            </summary>
        </member>
        <member name="M:Blip.HttpClient.Services.Bucket.BucketService.#ctor(Take.Blip.Client.ISender)">
            <summary>
            Creates an instance of the BucketService using a BLiP Client
            </summary>
            <param name="sender">ISender instance, from BlipHttpClientFactory</param>
        </member>
        <member name="M:Blip.HttpClient.Services.Bucket.BucketService.#ctor(System.String)">
            <summary>
            Creates a BucketService instance using a given authKey.
            </summary>
            <param name="authKey">Bot authorization key</param>
        </member>
        <member name="M:Blip.HttpClient.Services.Bucket.BucketService.GetAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a document from the bucket using the given <paramref name="id"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id"></param>
            <param name="cancellationToken"></param>
            <returns>Lime <c>Document</c> of the sub-type set on <c>T</c></returns>
        </member>
        <member name="M:Blip.HttpClient.Services.Bucket.BucketService.GetIdsAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the bucket documents IDs from index <paramref name="skip"/> to <paramref name="take"/>
            </summary>
            <param name="skip"></param>
            <param name="take"></param>
            <param name="cancellationToken"></param>
            <returns>A <c>DocumentCollection</c> of the recovered IDs</returns>
        </member>
        <member name="M:Blip.HttpClient.Services.Bucket.BucketService.SetAsync``1(System.String,``0,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Stores a <paramref name="document"/> on the bucket
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id"></param>
            <param name="document"></param>
            <param name="expiration"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Blip.HttpClient.Services.Bucket.BucketService.DeleteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the document with the given <paramref name="id"/> from the Bucket
            </summary>
            <param name="id"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Blip.HttpClient.Services.Bucket.BucketService.GetAsync``1(System.String,Serilog.ILogger,System.Threading.CancellationToken)">
            <summary>
            Gets a document from the bucket using the given <paramref name="id"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id"></param>
            <param name="logger"></param>
            <param name="cancellationToken"></param>
            <returns>Lime <c>Document</c> of the sub-type set on <c>T</c></returns>
            <exception cref="T:Blip.HttpClient.Exceptions.BlipHttpClientException">Failure getting <c>Document</c> from the Bucket</exception>
            <exception cref="T:System.Exception">Unknown error</exception>
        </member>
        <member name="M:Blip.HttpClient.Services.Bucket.BucketService.SetAsync``1(System.String,``0,Serilog.ILogger,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Stores a <paramref name="document"/> on the bucket
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id"></param>
            <param name="document"></param>
            <param name="logger"></param>
            <param name="expiration"></param>
            <param name="cancellationToken"></param>
            <returns>Lime <c>Command</c> response object</returns>
            <exception cref="T:Blip.HttpClient.Exceptions.BlipHttpClientException">Failure setting <c>Document</c> on the Bucket</exception>
            <exception cref="T:System.Exception">Unknown error</exception>
        </member>
        <member name="M:Blip.HttpClient.Services.Bucket.BucketService.DeleteAsync(System.String,Serilog.ILogger,System.Threading.CancellationToken)">
            <summary>
            Deletes the document with the given <paramref name="id"/> from the Bucket
            </summary>
            <param name="id"></param>
            <param name="logger"></param>
            <param name="cancellationToken"></param>
            <returns>Lime <c>Command</c> response object</returns>
            <exception cref="T:Blip.HttpClient.Exceptions.BlipHttpClientException">Failure deleting <c>Document</c> from the Bucket</exception>
            <exception cref="T:System.Exception">Unknown error</exception>
        </member>
        <member name="T:Blip.HttpClient.Services.Bucket.IBucketService">
            <summary>
            Allows the storage of documents in the server on an isolated chatbot's container
            </summary>
        </member>
        <member name="M:Blip.HttpClient.Services.Bucket.IBucketService.GetAsync``1(System.String,Serilog.ILogger,System.Threading.CancellationToken)">
            <summary>
            Gets a document from the bucket using the given <paramref name="id"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id"></param>
            <param name="logger"></param>
            <param name="cancellationToken"></param>
            <returns>Lime <c>Document</c> of the sub-type set on <c>T</c></returns>
            <exception cref="T:Blip.HttpClient.Exceptions.BlipHttpClientException">Failure getting <c>Document</c> from the Bucket</exception>
            <exception cref="T:System.Exception">Unknown error</exception>
        </member>
        <member name="M:Blip.HttpClient.Services.Bucket.IBucketService.SetAsync``1(System.String,``0,Serilog.ILogger,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Stores a <paramref name="document"/> on the bucket
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id"></param>
            <param name="document"></param>
            <param name="logger"></param>
            <param name="expiration"></param>
            <param name="cancellationToken"></param>
            <returns>Lime <c>Command</c> response object</returns>
            <exception cref="T:Blip.HttpClient.Exceptions.BlipHttpClientException">Failure setting <c>Document</c> on the Bucket</exception>
            <exception cref="T:System.Exception">Unknown error</exception>
        </member>
        <member name="M:Blip.HttpClient.Services.Bucket.IBucketService.DeleteAsync(System.String,Serilog.ILogger,System.Threading.CancellationToken)">
            <summary>
            Deletes the document with the given <paramref name="id"/> from the Bucket
            </summary>
            <param name="id"></param>
            <param name="logger"></param>
            <param name="cancellationToken"></param>
            <returns>Lime <c>Command</c> response object</returns>
            <exception cref="T:Blip.HttpClient.Exceptions.BlipHttpClientException">Failure deleting <c>Document</c> from the Bucket</exception>
            <exception cref="T:System.Exception">Unknown error</exception>
        </member>
        <member name="T:Blip.HttpClient.Services.Contacts.ContactService">
            <summary>
            Http Abstraction of BLiP's /contact URI
            </summary>
        </member>
        <member name="M:Blip.HttpClient.Services.Contacts.ContactService.#ctor(Take.Blip.Client.ISender)">
            <summary>
            Creates a ContactService instance using a BLiP client
            </summary>
            <param name="sender">ISender instance, from BlipHttpClientFactory</param>
        </member>
        <member name="M:Blip.HttpClient.Services.Contacts.ContactService.#ctor(System.String)">
            <summary>
            Creates a ContactService instance using a given authKey.
            </summary>
            <param name="authKey">Bot authorization key</param>
        </member>
        <member name="M:Blip.HttpClient.Services.Contacts.ContactService.DeleteAsync(Lime.Protocol.Identity,System.Threading.CancellationToken)">
            <summary>
            Deletes a contact from the bot's agenda
            </summary>
            <param name="identity"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Blip.HttpClient.Services.Contacts.ContactService.DeleteAsync(Lime.Protocol.Identity,System.Threading.CancellationToken,Serilog.ILogger)">
            <summary>
            Deletes a contact from the bot's agenda
            </summary>
            <param name="identity"></param>
            <param name="cancellationToken"></param>
            <param name="logger"></param>
            <returns>Lime <c>Command</c> response object</returns>
            <exception cref="T:Blip.HttpClient.Exceptions.BlipHttpClientException">Failure deleting the contact</exception>
            <exception cref="T:System.Exception">Unknown error</exception>
        </member>
        <member name="M:Blip.HttpClient.Services.Contacts.ContactService.GetAsync(Lime.Protocol.Identity,System.Threading.CancellationToken)">
            <summary>
            Gets the Bot's Contact using the <paramref name="identity"/> param
            </summary>
            <param name="identity"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Blip.HttpClient.Services.Contacts.ContactService.GetAsync(Lime.Protocol.Identity,System.Threading.CancellationToken,Serilog.ILogger)">
            <summary>
            Gets the Bot's Contact using the <paramref name="identity"/> param
            </summary>
            <param name="identity">User identifier whose contact must be recovered</param>
            <param name="cancellationToken"></param>
            <param name="logger">Optional <c>ILogger</c> from <c>Serilog</c> to log useful information</param>
            <returns>Lime <c>Contact</c> response object</returns>
            <example>
            <code>
            Contact x = await _contactService.GetContactAsync(contact, cancellationToken, logger)
            </code>
            </example>
            <exception cref="T:Blip.HttpClient.Exceptions.BlipHttpClientException">Failure getting the contact</exception>
            <exception cref="T:System.Exception">Unknown error</exception>
        </member>
        <member name="M:Blip.HttpClient.Services.Contacts.ContactService.MergeAsync(Lime.Protocol.Identity,Lime.Messaging.Resources.Contact,System.Threading.CancellationToken)">
            <summary>
            Updates the identity's contact with the new information, keeping any unchanged old data
            </summary>
            <param name="identity"></param>
            <param name="contact"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Blip.HttpClient.Services.Contacts.ContactService.MergeAsync(Lime.Protocol.Identity,Lime.Messaging.Resources.Contact,System.Threading.CancellationToken,Serilog.ILogger)">
            <summary>
            Merges the <paramref name="contact"/> with the existing one on the Bot's agenda
            </summary>
            <param name="identity"></param>
            <param name="contact"></param>
            <param name="cancellationToken"></param>
            <param name="logger"><c>ILogger</c> from <c>Serilog</c> to log useful information</param>
            <returns>Lime <c>Command</c> response object</returns>
            <exception cref="T:Blip.HttpClient.Exceptions.BlipHttpClientException">Failure merging the contact</exception>
            <exception cref="T:System.Exception">Unknown error</exception>
        </member>
        <member name="M:Blip.HttpClient.Services.Contacts.ContactService.SetAsync(Lime.Protocol.Identity,Lime.Messaging.Resources.Contact,System.Threading.CancellationToken)">
            <summary>
            Sets the <paramref name="contact"/> on the Bot's agenda
            </summary>
            <param name="identity"></param>
            <param name="contact"></param>
            <param name="cancellationToken"></param>
            <example>
            <code>
            Command x = await _contactService.SetContactAsync(contact, cancellationToken)
            </code>
            </example>
        </member>
        <member name="M:Blip.HttpClient.Services.Contacts.ContactService.SetAsync(Lime.Messaging.Resources.Contact,System.Threading.CancellationToken,Serilog.ILogger)">
            <summary>
            Sets the <paramref name="contact"/> on the Bot's agenda
            </summary>
            <param name="contact"></param>
            <param name="cancellationToken"></param>
            <param name="logger">Optional <c>ILogger</c> from <c>Serilog</c> to log useful information</param>
            <returns>Lime <c>Command</c> response object</returns>
            <example>
            <code>
            Command x = await _contactService.SetContactAsync(contact, cancellationToken, logger)
            </code>
            </example>
            <exception cref="T:Blip.HttpClient.Exceptions.BlipHttpClientException">Failure setting the contact</exception>
            <exception cref="T:System.Exception">Unknown error</exception>
        </member>
        <member name="T:Blip.HttpClient.Services.Contacts.IContactService">
            <summary>
            Http Abstraction of BLiP's /contact URI
            </summary>
        </member>
        <member name="M:Blip.HttpClient.Services.Contacts.IContactService.GetAsync(Lime.Protocol.Identity,System.Threading.CancellationToken,Serilog.ILogger)">
            <summary>
            Gets the Bot's Contact using the <paramref name="identity"/> param
            </summary>
            <param name="identity">User identifier whose contact must be recovered</param>
            <param name="cancellationToken"></param>
            <param name="logger">Optional <c>ILogger</c> from <c>Serilog</c> to log useful information</param>
            <returns>Lime <c>Contact</c> response object</returns>
            <example>
            <code>
            Contact x = await _contactService.GetContactAsync(contact, cancellationToken, logger)
            </code>
            </example>
            <exception cref="T:Blip.HttpClient.Exceptions.BlipHttpClientException">Failure getting the contact</exception>
            <exception cref="T:System.Exception">Unknown error</exception>
        </member>
        <member name="M:Blip.HttpClient.Services.Contacts.IContactService.SetAsync(Lime.Messaging.Resources.Contact,System.Threading.CancellationToken,Serilog.ILogger)">
            <summary>
            Sets the <paramref name="contact"/> on the Bot's agenda
            </summary>
            <param name="contact"></param>
            <param name="cancellationToken"></param>
            <param name="logger"><c>ILogger</c> from <c>Serilog</c> to log useful information</param>
            <returns>Lime <c>Command</c> response object</returns>
            <example>
            <code>
            Command x = await _contactService.SetContactAsync(contact, cancellationToken, logger)
            </code>
            </example>
            <exception cref="T:Blip.HttpClient.Exceptions.BlipHttpClientException">Failure setting the contact</exception>
            <exception cref="T:System.Exception">Unknown error</exception>
        </member>
        <member name="M:Blip.HttpClient.Services.Contacts.IContactService.MergeAsync(Lime.Protocol.Identity,Lime.Messaging.Resources.Contact,System.Threading.CancellationToken,Serilog.ILogger)">
            <summary>
            Merges the <paramref name="contact"/> with the existing one on the Bot's agenda
            </summary>
            <param name="identity"></param>
            <param name="contact"></param>
            <param name="cancellationToken"></param>
            <param name="logger"><c>ILogger</c> from <c>Serilog</c> to log useful information</param>
            <returns></returns>
            <exception cref="T:Blip.HttpClient.Exceptions.BlipHttpClientException">Failure setting the contact</exception>
            <exception cref="T:System.Exception">Unknown error</exception>
        </member>
        <member name="M:Blip.HttpClient.Services.Contacts.IContactService.DeleteAsync(Lime.Protocol.Identity,System.Threading.CancellationToken,Serilog.ILogger)">
            <summary>
            Deletes the <paramref name="identity"/> contact from the Bot's BLiP Agenda
            </summary>
            <param name="identity"></param>
            <param name="cancellationToken"></param>
            <param name="logger"><c>ILogger</c> from <c>Serilog</c> to log useful information</param>
            <returns></returns>
            <exception cref="T:Blip.HttpClient.Exceptions.BlipHttpClientException">Failure setting the contact</exception>
            <exception cref="T:System.Exception">Unknown error</exception>
        </member>
        <member name="T:Blip.HttpClient.Services.EventTracker.EventTrackService">
            <summary>
            Service responsible for managing trackings
            </summary>
        </member>
        <member name="M:Blip.HttpClient.Services.EventTracker.EventTrackService.#ctor(Take.Blip.Client.ISender)">
            <summary>
            Creates an instance of the EventTrackService using a BLiP Client
            </summary>
            <param name="sender">ISender instance, from BlipHttpClientFactory</param>
        </member>
        <member name="M:Blip.HttpClient.Services.EventTracker.EventTrackService.#ctor(System.String)">
            <summary>
            Creates a EventTrackService instance using a given authKey.
            </summary>
            <param name="authKey">Bot authorization key</param>
        </member>
        <member name="M:Blip.HttpClient.Services.EventTracker.EventTrackService.AddAsync(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken,Lime.Protocol.Identity)">
            <summary>
            Add a tracking to AnalyticsAddress: postmaster@analytics.msging.net
            </summary>
            <param name="category">Category to aggregate the related events</param>
            <param name="action">The action associated to the event</param>
            <param name="extras">Extra information about the events</param>
            <param name="cancellationToken"></param>
            <param name="identity">The contact associated with this event</param>
        </member>
        <member name="M:Blip.HttpClient.Services.EventTracker.EventTrackService.AddAsync(System.String,System.String,Serilog.ILogger,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken,Lime.Protocol.Identity)">
            <summary>
            Add a tracking to AnalyticsAddress: postmaster@analytics.msging.net
            </summary>
            <param name="category">Category to aggregate the related events</param>
            <param name="action">The action associated to the event</param>
            <param name="logger"></param>
            <param name="extras">Extra information about the events</param>
            <param name="cancellationToken"></param>
            <param name="identity">The identity of contact associated to the event</param>
        </member>
        <member name="M:Blip.HttpClient.Services.EventTracker.EventTrackService.AddAsync(System.String,System.String,System.String,Lime.Protocol.Message,Lime.Messaging.Resources.Contact,System.String,System.Nullable{System.Decimal},System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Add a tracking to AnalyticsAddress: postmaster@analytics.msging.net
            </summary>
            <param name="category"></param>
            <param name="action"></param>
            <param name="label"></param>
            <param name="message"></param>
            <param name="contact"></param>
            <param name="contactExternalId"></param>
            <param name="value"></param>
            <param name="extras"></param>
            <param name="fireAndForget"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Blip.HttpClient.Services.EventTracker.EventTrackService.AddAsync(System.String,System.String,Serilog.ILogger,System.String,Lime.Protocol.Message,Lime.Messaging.Resources.Contact,System.String,System.Nullable{System.Decimal},System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Add a tracking to AnalyticsAddress: postmaster@analytics.msging.net
            </summary>
            <param name="category">Category to aggregate the related events</param>
            <param name="action">The action associated to the event</param>
            <param name="logger"></param>
            <param name="label"></param>
            <param name="message"></param>
            <param name="contact">The contact associated to the event</param>
            <param name="contactExternalId"></param>
            <param name="value"></param>
            <param name="extras">Extra information about the events</param>
            <param name="fireAndForget"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Blip.HttpClient.Services.EventTracker.EventTrackService.AddAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Decimal},System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Add a tracking to AnalyticsAddress: postmaster@analytics.msging.net
            </summary>
            <param name="category"></param>
            <param name="action"></param>
            <param name="label"></param>
            <param name="messageId"></param>
            <param name="contactIdentity"></param>
            <param name="contactSource"></param>
            <param name="contactGroup"></param>
            <param name="contactExternalId"></param>
            <param name="value"></param>
            <param name="extras"></param>
            <param name="fireAndForget"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Blip.HttpClient.Services.EventTracker.EventTrackService.AddAsync(System.String,System.String,Serilog.ILogger,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Decimal},System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Add a tracking to AnalyticsAddress: postmaster@analytics.msging.net
            </summary>
            <param name="category">Category to aggregate the related events</param>
            <param name="action">The action associated to the event</param>
            <param name="logger"></param>
            <param name="label"></param>
            <param name="messageId"></param>
            <param name="contactIdentity">The identity of the contact associated to the event</param>
            <param name="contactSource"></param>
            <param name="contactGroup"></param>
            <param name="contactExternalId"></param>
            <param name="value"></param>
            <param name="extras">Extra information about the events</param>
            <param name="fireAndForget"></param>
            <param name="cancellationToken"></param>
            <exception cref="T:Blip.HttpClient.Exceptions.BlipHttpClientException">Failure sending message to distribution list</exception>
            <exception cref="T:System.Exception">Unknown error</exception>
        </member>
        <member name="M:Blip.HttpClient.Services.EventTracker.EventTrackService.GetAllAsync(System.DateTimeOffset,System.DateTimeOffset,System.String,System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get all trackings of some category and action in a period of time
            </summary>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <param name="category"></param>
            <param name="action"></param>
            <param name="skip"></param>
            <param name="take"></param>
            <param name="cancellationToken"></param>
            <returns><c>DocumentCollection</c> response object</returns>
        </member>
        <member name="M:Blip.HttpClient.Services.EventTracker.EventTrackService.GetCategoriesAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get all trackings categories
            </summary>
            <param name="take"></param>
            <param name="cancellationToken"></param>
            <returns><c>DocumentCollection</c></returns>
        </member>
        <member name="M:Blip.HttpClient.Services.EventTracker.EventTrackService.GetCategoryActionsCounterAsync(System.DateTimeOffset,System.DateTimeOffset,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get all actions for a tracking category
            </summary>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <param name="category"></param>
            <param name="take"></param>
            <param name="cancellationToken"></param>
            <returns><c>DocumentCollection</c></returns>
        </member>
        <member name="T:Blip.HttpClient.Services.EventTracker.IEventTrackService">
            <summary>
            Service responsible for managing trackings
            </summary>
        </member>
        <member name="M:Blip.HttpClient.Services.EventTracker.IEventTrackService.AddAsync(System.String,System.String,Serilog.ILogger,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken,Lime.Protocol.Identity)">
            <summary>
            Add a tracking to AnalyticsAddress: postmaster@analytics.msging.net
            </summary>
            <param name="category">Category to aggregate the related events</param>
            <param name="action">The action associated to the event</param>
            <param name="logger"></param>
            <param name="extras">Extra information about the events</param>
            <param name="cancellationToken"></param>
            <param name="identity">The identity of contact associated to the event</param>
        </member>
        <member name="M:Blip.HttpClient.Services.EventTracker.IEventTrackService.AddAsync(System.String,System.String,Serilog.ILogger,System.String,Lime.Protocol.Message,Lime.Messaging.Resources.Contact,System.String,System.Nullable{System.Decimal},System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Add a tracking to AnalyticsAddress: postmaster@analytics.msging.net
            </summary>
            <param name="category">Category to aggregate the related events</param>
            <param name="action">The action associated to the event</param>
            <param name="logger"></param>
            <param name="label"></param>
            <param name="message"></param>
            <param name="contact">The contact associated to the event</param>
            <param name="contactExternalId"></param>
            <param name="value"></param>
            <param name="extras">Extra information about the events</param>
            <param name="fireAndForget"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Blip.HttpClient.Services.EventTracker.IEventTrackService.AddAsync(System.String,System.String,Serilog.ILogger,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Decimal},System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Add a tracking to AnalyticsAddress: postmaster@analytics.msging.net
            </summary>
            <param name="category">Category to aggregate the related events</param>
            <param name="action">The action associated to the event</param>
            <param name="logger"></param>
            <param name="label"></param>
            <param name="messageId"></param>
            <param name="contactIdentity">The identity of the contact associated to the event</param>
            <param name="contactSource"></param>
            <param name="contactGroup"></param>
            <param name="contactExternalId"></param>
            <param name="value"></param>
            <param name="extras">Extra information about the events</param>
            <param name="fireAndForget"></param>
            <param name="cancellationToken"></param>
            <exception cref="T:Blip.HttpClient.Exceptions.BlipHttpClientException">Failure sending message to distribution list</exception>
            <exception cref="T:System.Exception">Unknown error</exception>
        </member>
        <member name="T:Blip.HttpClient.Services.IBlipHttpClient">
            <summary>
            BLiP Client that uses Http calls
            </summary>
        </member>
        <member name="P:Blip.HttpClient.Services.IBlipHttpClient.Authorization">
            <summary>
            Authorization key
            </summary>
        </member>
        <member name="M:Blip.HttpClient.Services.IBlipHttpClient.ProcessCommandAsync(Lime.Protocol.Command,System.Threading.CancellationToken)">
            <summary>
            Processes a Lime <paramref name="requestCommand"/> and returns a command response
            </summary>
            <param name="requestCommand"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Blip.HttpClient.Services.IBlipHttpClient.SendCommandAsync(Lime.Protocol.Command,System.Threading.CancellationToken)">
            <summary>
            Sends a lime <paramref name="command"/> without awaiting for a response
            </summary>
            <param name="command"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Blip.HttpClient.Services.IBlipHttpClient.SendMessageAsync(Lime.Protocol.Message,System.Threading.CancellationToken)">
            <summary>
            Sends a Lime Message
            </summary>
            <param name="message"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Blip.HttpClient.Services.IBlipHttpClient.SendNotificationAsync(Lime.Protocol.Notification,System.Threading.CancellationToken)">
            <summary>
            Sends a notification
            </summary>
            <param name="notification"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Blip.HttpClient.Services.Resources.ResourceService">
            <summary>
            Allows the storage of documents in the server in an isolated space for each chatbot
            </summary>
        </member>
        <member name="M:Blip.HttpClient.Services.Resources.ResourceService.#ctor(Take.Blip.Client.ISender)">
            <summary>
            ResourceService builder using an already instantiated <paramref name="sender"/>
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:Blip.HttpClient.Services.Resources.ResourceService.#ctor(System.String)">
            <summary>
            ResourceService builder using a given <paramref name="authKey"/> to instantiate the sender on demand
            </summary>
            <param name="authKey"></param>
        </member>
        <member name="M:Blip.HttpClient.Services.Resources.ResourceService.DeleteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the resource with the given <paramref name="id"/>
            </summary>
            <param name="id">Unique id for the resource to be deleted</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Blip.HttpClient.Services.Resources.ResourceService.DeleteAsync(System.String,Serilog.ILogger,System.Threading.CancellationToken)">
            <summary>
            Deletes the resource with the given <paramref name="id"/>
            </summary>
            <param name="id">Unique id for the resource to be deleted</param>
            <param name="logger"></param>
            <param name="cancellationToken"></param>
            <returns>BLiP <c>Command</c> with the response from BLiP's API</returns>
        </member>
        <member name="M:Blip.HttpClient.Services.Resources.ResourceService.GetAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a Resource by its <paramref name="id"/>
            </summary>
            <typeparam name="T">Type of the resource to be recovered</typeparam>
            <param name="id">Unique id for the resource to be recovered</param>
            <param name="cancellationToken"></param>
            <returns>Recovered resource of type <c>T</c></returns>
        </member>
        <member name="M:Blip.HttpClient.Services.Resources.ResourceService.GetAsync``1(System.String,Serilog.ILogger,System.Threading.CancellationToken)">
            <summary>
            Gets a Resource by its <paramref name="id"/>
            </summary>
            <typeparam name="T">Type of the resource to be recovered</typeparam>
            <param name="id">Unique id for the resource to be recovered</param>
            <param name="logger"></param>
            <param name="cancellationToken"></param>
            <returns>Recovered resource of type <c>T</c></returns>
        </member>
        <member name="M:Blip.HttpClient.Services.Resources.ResourceService.GetIdsAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Recovers a given number of Resource IDs 
            </summary>
            <param name="skip"></param>
            <param name="take"></param>
            <param name="cancellationToken"></param>
            <returns><c>DocumentCollection</c> with the resource IDs recovered</returns>
        </member>
        <member name="M:Blip.HttpClient.Services.Resources.ResourceService.GetIdsAsync(Serilog.ILogger,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Recovers a given number of Resource IDs 
            </summary>
            <param name="logger"></param>
            <param name="skip"></param>
            <param name="take"></param>
            <param name="cancellationToken"></param>
            <returns><c>DocumentCollection</c> with the resource IDs recovered</returns>
        </member>
        <member name="M:Blip.HttpClient.Services.Resources.ResourceService.SetAsync``1(System.String,``0,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Set a <paramref name="document"/> on BLiP's Resources using a given <paramref name="id"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id"></param>
            <param name="document"></param>
            <param name="expiration"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:Blip.HttpClient.Services.Resources.ResourceService.SetAsync``1(System.String,``0,Serilog.ILogger,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Set a <paramref name="document"/> on BLiP's Resources using a given <paramref name="id"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id"></param>
            <param name="document"></param>
            <param name="logger"></param>
            <param name="expiration"></param>
            <param name="cancellationToken"></param>
            <returns><c>Command</c> with BLiP's response</returns>
        </member>
        <member name="T:Blip.HttpClient.Services.Threads.Enumerations">
            <summary>
            Enumerations used on Threads service
            </summary>
        </member>
        <member name="T:Blip.HttpClient.Services.Threads.Enumerations.ChatOrder">
            <summary>
            Order of the chat messages
            </summary>
        </member>
        <member name="F:Blip.HttpClient.Services.Threads.Enumerations.ChatOrder.Asc">
            <summary>
            Oldest to newest
            </summary>
        </member>
        <member name="F:Blip.HttpClient.Services.Threads.Enumerations.ChatOrder.Desc">
            <summary>
            Newest to oldest
            </summary>
        </member>
        <member name="T:Blip.HttpClient.Services.Threads.IThreadService">
            <summary>
            Service responsible for getting chat history
            </summary>
        </member>
        <member name="M:Blip.HttpClient.Services.Threads.IThreadService.GetHistoryAsync(Lime.Protocol.Identity,Blip.HttpClient.Services.Threads.Enumerations.ChatOrder,Serilog.ILogger,System.Threading.CancellationToken,System.DateTime)">
            <summary>
            Gets the last chatbot's messages in a specific thread. 
            </summary>
            <param name="userIdentity">User to recover messages</param>
            <param name="order"></param>
            <param name="logger"></param>
            <param name="cancellationToken"></param>
            <param name="startDateTime">Date and time for first message</param>
            <returns><c>IEnumerable</c> of Lime ThreadMessages</returns>
            <exception cref="T:Blip.HttpClient.Exceptions.BlipHttpClientException">Failure getting chat history</exception>
            <exception cref="T:System.Exception">Unknown error</exception>
        </member>
        <member name="T:Blip.HttpClient.Services.Threads.ThreadService">
            <summary>
            Service responsible for getting chat history
            </summary>
        </member>
        <member name="M:Blip.HttpClient.Services.Threads.ThreadService.#ctor(Take.Blip.Client.ISender)">
            <summary>
            Creates a ThreadService instance using a BLiP client
            </summary>
            <param name="sender">ISender instance, from BlipHttpClientFactory</param>
        </member>
        <member name="M:Blip.HttpClient.Services.Threads.ThreadService.#ctor(System.String)">
            <summary>
            Creates a ThreadService instance using a given authKey.
            </summary>
            <param name="authKey">Bot authorization key</param>
        </member>
        <member name="M:Blip.HttpClient.Services.Threads.ThreadService.GetHistoryAsync(Lime.Protocol.Identity,Blip.HttpClient.Services.Threads.Enumerations.ChatOrder,Serilog.ILogger,System.Threading.CancellationToken,System.DateTime)">
            <summary>
            Gets the last chatbot's messages in a specific thread. 
            </summary>
            <param name="userIdentity">User to recover messages</param>
            <param name="order"></param>
            <param name="logger"></param>
            <param name="cancellationToken"></param>
            <param name="startDateTime">Date and time for first message</param>
            <returns><c>IEnumerable</c> of Lime ThreadMessages</returns>
            <exception cref="T:Blip.HttpClient.Exceptions.BlipHttpClientException">Failure getting chat history</exception>
            <exception cref="T:System.Exception">Unknown error</exception>
        </member>
    </members>
</doc>
